---
# yamllint disable rule:line-length
name: Validate Kubernetes Manifests
description: Filter changed files â†’ validate kustomize/kubeconform using Flux CRD schemas
author: homelab-ops@homelab-ops.com

inputs:
  debug:
    description: Print debug info when true
    required: false
    default: 'false'
  base-kustomization-file:
    description: Optional base kustomization.yaml for post-build
    required: false
    default: ''
  env-file:
    description: Optional env-file for post-build envsubst
    required: false
    default: ''
  files:
    description: 'A JSON array of kubernetes manifest file paths to seed discovery. If empty/not provided, discovers all kustomizations.'
    required: false
    default: '[]'
  kubeconform-flags:
    description: Flags to pass to kubeconform
    required: false
    default: '-skip=Secret'
  kustomize-flags:
    description: Flags to pass to kustomize
    required: false
    default: '--load-restrictor=LoadRestrictionsNone'
  pkg-exclude:
    description: JSON array of glob prefixes to exclude pkg-dirs (default [])
    required: false
    default: '[]'
  pkg-include:
    description: JSON array of glob prefixes to include pkg-dirs (default ["."])
    required: false
    default: '["."]'

runs:
  using: composite
  steps:
  - name: Discover kustomizations from seed files
    id: discover-from-seed
    if: inputs.files != '[]'
    env:
      SEED_FILES_JSON: ${{ inputs.files }}
    shell: bash
    # yamllint disable-line rule:indentation
    run: |
      echo "Discovering kustomizations from provided file list..."

      declare -a ks_files=()
      declare -a orphan_files=()
      mapfile -t changed_files_array < <(echo "$SEED_FILES_JSON" | jq -r '.[]')

      for file in "${changed_files_array[@]}"; do
        path=$(dirname "$file"); found=false
        while [[ "$path" != "." && "$path" != "/" ]]; do
          if [[ -f "$path/kustomization.yaml" ]]; then ks_files+=("$path/kustomization.yaml"); found=true; break; fi
          path=$(dirname "$path")
        done
        if ! $found && [[ -f "./kustomization.yaml" ]]; then ks_files+=("./kustomization.yaml"); found=true; fi
        if ! $found; then orphan_files+=("$file"); fi
      done

      # Generate kustomization files output
      if (( ${#ks_files[@]} > 0 )); then
        # Dedupe in-place
        mapfile -t ks_files < <(printf "%s\n" "${ks_files[@]}" | sort -u)
        # Generate list as json-array serialized to string
        printf "%s\n" "${ks_files[@]}" | jq -R . | jq -s -c . > /tmp/ks.json
        echo "kustomization-files=$(cat /tmp/ks.json)" >> $GITHUB_OUTPUT
      else
        echo "kustomization-files=[]" >> $GITHUB_OUTPUT
      fi

      # Generate orphan files output
      if (( ${#orphan_files[@]} > 0 )); then
        # Dedupe in-place
        mapfile -t orphan_files < <(printf "%s\n" "${orphan_files[@]}" | sort -u)
        # Generate list as json-array serialized to string
        printf "%s\n" "${orphan_files[@]}" | jq -R . | jq -s -c . > /tmp/orphans.json
        echo "orphan-files=$(cat /tmp/orphans.json)" >> $GITHUB_OUTPUT
      else
        echo "orphan-files=[]" >> $GITHUB_OUTPUT
      fi

      echo "Found ${#ks_files[@]} kustomization files..."
      echo "::group::kustomizations"
      if (( ${#ks_files[@]} > 0 )); then
        printf "  - %s\n" "${ks_files[@]}"
      fi
      echo ""
      echo "::endgroup::"

      echo "Found ${#orphan_files[@]} orphan Kubernetes files..."
      echo "::group::orphans"
      if (( ${#orphan_files[@]} > 0 )); then
        printf "  - %s\n" "${orphan_files[@]}"
      fi
      echo ""
      echo "::endgroup::"

  - name: Discover all kustomizations
    id: discover-all
    if: inputs.files == '[]'
    shell: bash
    # yamllint disable-line rule:indentation
    run: |
      echo "No seed files provided, discovering all kustomizations..."
      mapfile -t ks_files < <(find . -type f -name "kustomization.yaml")

      if (( ${#ks_files[@]} > 0 )); then
        printf "%s\n" "${ks_files[@]}" | sort -u | jq -R . | jq -s -c . > /tmp/ks.json
        echo "kustomization-files=$(cat /tmp/ks.json)" >> $GITHUB_OUTPUT
      else
        echo "kustomization-files=[]" >> $GITHUB_OUTPUT
      fi

      echo "Found ${#ks_files[@]} kustomization files..."
      echo "::group::kustomizations"
      if (( ${#ks_files[@]} > 0 )); then
        printf "  - %s\n" "${ks_files[@]}" | sort -u
      fi
      echo ""
      echo "::endgroup::"

  - name: Determine final kustomization list
    id: final-list
    env:
      FINAL_FILES: ${{ steps.discover-from-seed.outputs.kustomization-files || steps.discover-all.outputs.kustomization-files }}
    shell: bash
    # yamllint disable-line rule:indentation
    run: |
      echo "kustomizations=${FINAL_FILES:-'[]'}" >> $GITHUB_OUTPUT

  - name: Set monthly cache key
    id: cache-key
    shell: bash
    run: echo "monthly_cache_key=$(date +'%Y-%m')" >> "$GITHUB_OUTPUT"

  - name: Cache Flux Schemas
    if: steps.final-list.outputs.kustomizations != '[]'
    uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
    with:
      path: ~/.cache/kubeconform-schemas
      key: kubeconform-schemas-v1

  - name: Cache Dependencies
    if: steps.final-list.outputs.kustomizations != '[]'
    uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
    with:
      path: "~/.local/validate-kubernetes-manifests/bin"
      key: dependencies-${{ steps.cache-key.outputs.monthly_cache_key }}

  - name: Run validation
    if: steps.final-list.outputs.kustomizations != '[]'
    env:
      # renovate: datasource=github-releases depName=yannh/kubeconform
      KUBECONFORM_VERSION: "v0.7.0"
      # renovate: datasource=github-releases depName=kubernetes-sigs/kustomize extractVersion=^kustomize/(?<version>.*)$
      KUSTOMIZE_VERSION: "v5.7.1"
      # renovate: datasource=github-releases depName=fluxcd/flux2
      FLUX_VERSION: "v2.6.4"
    shell: bash
    # yamllint disable-line rule:indentation
    run: |
      echo "Running validation..."
      mapfile -t FILES < <(echo '${{ steps.final-list.outputs.kustomizations }}' | jq -r '.[]')
      ${{ github.action_path }}/scripts/validate-k8s.sh \
        --github-mode \
        --flux-version "${{ inputs.flux-version }}" \
        --pkg-include '${{ inputs.pkg-include }}' \
        --pkg-exclude '${{ inputs.pkg-exclude }}' \
        --kubeconform-flags "${{ inputs.kubeconform-flags }}" \
        --kustomize-flags "${{ inputs.kustomize-flags }}" \
        $( [[ -n "${{ inputs.env-file }}" ]] && echo "--env-file ${{ inputs.env-file }}" ) \
        $( [[ -n "${{ inputs.base-kustomization-file }}" ]] && echo "--base-kustomization-file ${{ inputs.base-kustomization-file }}" ) \
        $( [[ "${{ inputs.debug }}" == 'true' ]] && echo "--debug" ) \
        "${FILES[@]}"
